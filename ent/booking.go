// Code generated by ent, DO NOT EDIT.

package ent

import (
	"carlord/ent/booking"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Booking is the model entity for the Booking schema.
type Booking struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt time.Time `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// ReturnCarAt holds the value of the "return_car_at" field.
	ReturnCarAt time.Time `json:"return_car_at,omitempty"`
	// FuelLevelAtBegin holds the value of the "fuel_level_at_begin" field.
	FuelLevelAtBegin float32 `json:"fuel_level_at_begin,omitempty"`
	// FuelLevelAtEnd holds the value of the "fuel_level_at_end" field.
	FuelLevelAtEnd float32 `json:"fuel_level_at_end,omitempty"`
	// MileageBegin holds the value of the "mileage_begin" field.
	MileageBegin int `json:"mileage_begin,omitempty"`
	// MileageEnd holds the value of the "mileage_end" field.
	MileageEnd int `json:"mileage_end,omitempty"`
	// BookingStatus holds the value of the "booking_status" field.
	BookingStatus string `json:"booking_status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookingQuery when eager-loading is set.
	Edges BookingEdges `json:"edges"`
}

// BookingEdges holds the relations/edges for other nodes in the graph.
type BookingEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Car holds the value of the car edge.
	Car []*Car `json:"car,omitempty"`
	// Billing holds the value of the billing edge.
	Billing []*Billing `json:"billing,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e BookingEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading.
func (e BookingEdges) CarOrErr() ([]*Car, error) {
	if e.loadedTypes[1] {
		return e.Car, nil
	}
	return nil, &NotLoadedError{edge: "car"}
}

// BillingOrErr returns the Billing value or an error if the edge
// was not loaded in eager-loading.
func (e BookingEdges) BillingOrErr() ([]*Billing, error) {
	if e.loadedTypes[2] {
		return e.Billing, nil
	}
	return nil, &NotLoadedError{edge: "billing"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Booking) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case booking.FieldFuelLevelAtBegin, booking.FieldFuelLevelAtEnd:
			values[i] = new(sql.NullFloat64)
		case booking.FieldID, booking.FieldMileageBegin, booking.FieldMileageEnd:
			values[i] = new(sql.NullInt64)
		case booking.FieldBookingStatus:
			values[i] = new(sql.NullString)
		case booking.FieldStartAt, booking.FieldEndAt, booking.FieldReturnCarAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Booking", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Booking fields.
func (b *Booking) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case booking.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case booking.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				b.StartAt = value.Time
			}
		case booking.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				b.EndAt = value.Time
			}
		case booking.FieldReturnCarAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field return_car_at", values[i])
			} else if value.Valid {
				b.ReturnCarAt = value.Time
			}
		case booking.FieldFuelLevelAtBegin:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_level_at_begin", values[i])
			} else if value.Valid {
				b.FuelLevelAtBegin = float32(value.Float64)
			}
		case booking.FieldFuelLevelAtEnd:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_level_at_end", values[i])
			} else if value.Valid {
				b.FuelLevelAtEnd = float32(value.Float64)
			}
		case booking.FieldMileageBegin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mileage_begin", values[i])
			} else if value.Valid {
				b.MileageBegin = int(value.Int64)
			}
		case booking.FieldMileageEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mileage_end", values[i])
			} else if value.Valid {
				b.MileageEnd = int(value.Int64)
			}
		case booking.FieldBookingStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field booking_status", values[i])
			} else if value.Valid {
				b.BookingStatus = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Booking entity.
func (b *Booking) QueryUser() *UserQuery {
	return (&BookingClient{config: b.config}).QueryUser(b)
}

// QueryCar queries the "car" edge of the Booking entity.
func (b *Booking) QueryCar() *CarQuery {
	return (&BookingClient{config: b.config}).QueryCar(b)
}

// QueryBilling queries the "billing" edge of the Booking entity.
func (b *Booking) QueryBilling() *BillingQuery {
	return (&BookingClient{config: b.config}).QueryBilling(b)
}

// Update returns a builder for updating this Booking.
// Note that you need to call Booking.Unwrap() before calling this method if this Booking
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Booking) Update() *BookingUpdateOne {
	return (&BookingClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Booking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Booking) Unwrap() *Booking {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Booking is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Booking) String() string {
	var builder strings.Builder
	builder.WriteString("Booking(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("start_at=")
	builder.WriteString(b.StartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(b.EndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("return_car_at=")
	builder.WriteString(b.ReturnCarAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("fuel_level_at_begin=")
	builder.WriteString(fmt.Sprintf("%v", b.FuelLevelAtBegin))
	builder.WriteString(", ")
	builder.WriteString("fuel_level_at_end=")
	builder.WriteString(fmt.Sprintf("%v", b.FuelLevelAtEnd))
	builder.WriteString(", ")
	builder.WriteString("mileage_begin=")
	builder.WriteString(fmt.Sprintf("%v", b.MileageBegin))
	builder.WriteString(", ")
	builder.WriteString("mileage_end=")
	builder.WriteString(fmt.Sprintf("%v", b.MileageEnd))
	builder.WriteString(", ")
	builder.WriteString("booking_status=")
	builder.WriteString(b.BookingStatus)
	builder.WriteByte(')')
	return builder.String()
}

// Bookings is a parsable slice of Booking.
type Bookings []*Booking

func (b Bookings) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
