// Code generated by ent, DO NOT EDIT.

package ent

import (
	"carlord/ent/billing"
	"carlord/ent/booking"
	"carlord/ent/card"
	"carlord/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BillingCreate is the builder for creating a Billing entity.
type BillingCreate struct {
	config
	mutation *BillingMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (bc *BillingCreate) SetStatus(s string) *BillingCreate {
	bc.mutation.SetStatus(s)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BillingCreate) SetNillableStatus(s *string) *BillingCreate {
	if s != nil {
		bc.SetStatus(*s)
	}
	return bc
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (bc *BillingCreate) SetBookingID(id int) *BillingCreate {
	bc.mutation.SetBookingID(id)
	return bc
}

// SetBooking sets the "booking" edge to the Booking entity.
func (bc *BillingCreate) SetBooking(b *Booking) *BillingCreate {
	return bc.SetBookingID(b.ID)
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (bc *BillingCreate) SetCardID(id int) *BillingCreate {
	bc.mutation.SetCardID(id)
	return bc
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (bc *BillingCreate) SetNillableCardID(id *int) *BillingCreate {
	if id != nil {
		bc = bc.SetCardID(*id)
	}
	return bc
}

// SetCard sets the "card" edge to the Card entity.
func (bc *BillingCreate) SetCard(c *Card) *BillingCreate {
	return bc.SetCardID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bc *BillingCreate) SetUserID(id int) *BillingCreate {
	bc.mutation.SetUserID(id)
	return bc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bc *BillingCreate) SetNillableUserID(id *int) *BillingCreate {
	if id != nil {
		bc = bc.SetUserID(*id)
	}
	return bc
}

// SetUser sets the "user" edge to the User entity.
func (bc *BillingCreate) SetUser(u *User) *BillingCreate {
	return bc.SetUserID(u.ID)
}

// Mutation returns the BillingMutation object of the builder.
func (bc *BillingCreate) Mutation() *BillingMutation {
	return bc.mutation
}

// Save creates the Billing in the database.
func (bc *BillingCreate) Save(ctx context.Context) (*Billing, error) {
	var (
		err  error
		node *Billing
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Billing)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BillingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BillingCreate) SaveX(ctx context.Context) *Billing {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BillingCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BillingCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BillingCreate) defaults() {
	if _, ok := bc.mutation.Status(); !ok {
		v := billing.DefaultStatus
		bc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BillingCreate) check() error {
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Billing.status"`)}
	}
	if _, ok := bc.mutation.BookingID(); !ok {
		return &ValidationError{Name: "booking", err: errors.New(`ent: missing required edge "Billing.booking"`)}
	}
	return nil
}

func (bc *BillingCreate) sqlSave(ctx context.Context) (*Billing, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bc *BillingCreate) createSpec() (*Billing, *sqlgraph.CreateSpec) {
	var (
		_node = &Billing{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: billing.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: billing.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(billing.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if nodes := bc.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   billing.BookingTable,
			Columns: []string{billing.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.CardTable,
			Columns: []string{billing.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.billing_card = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.UserTable,
			Columns: []string{billing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.billing_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BillingCreateBulk is the builder for creating many Billing entities in bulk.
type BillingCreateBulk struct {
	config
	builders []*BillingCreate
}

// Save creates the Billing entities in the database.
func (bcb *BillingCreateBulk) Save(ctx context.Context) ([]*Billing, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Billing, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BillingCreateBulk) SaveX(ctx context.Context) []*Billing {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BillingCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BillingCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
