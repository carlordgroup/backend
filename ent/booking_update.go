// Code generated by ent, DO NOT EDIT.

package ent

import (
	"carlord/ent/billing"
	"carlord/ent/booking"
	"carlord/ent/car"
	"carlord/ent/predicate"
	"carlord/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookingUpdate is the builder for updating Booking entities.
type BookingUpdate struct {
	config
	hooks    []Hook
	mutation *BookingMutation
}

// Where appends a list predicates to the BookingUpdate builder.
func (bu *BookingUpdate) Where(ps ...predicate.Booking) *BookingUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetStartAt sets the "start_at" field.
func (bu *BookingUpdate) SetStartAt(t time.Time) *BookingUpdate {
	bu.mutation.SetStartAt(t)
	return bu
}

// SetEndAt sets the "end_at" field.
func (bu *BookingUpdate) SetEndAt(t time.Time) *BookingUpdate {
	bu.mutation.SetEndAt(t)
	return bu
}

// SetReturnCarAt sets the "return_car_at" field.
func (bu *BookingUpdate) SetReturnCarAt(t time.Time) *BookingUpdate {
	bu.mutation.SetReturnCarAt(t)
	return bu
}

// SetFuelLevelAtBegin sets the "fuel_level_at_begin" field.
func (bu *BookingUpdate) SetFuelLevelAtBegin(f float32) *BookingUpdate {
	bu.mutation.ResetFuelLevelAtBegin()
	bu.mutation.SetFuelLevelAtBegin(f)
	return bu
}

// AddFuelLevelAtBegin adds f to the "fuel_level_at_begin" field.
func (bu *BookingUpdate) AddFuelLevelAtBegin(f float32) *BookingUpdate {
	bu.mutation.AddFuelLevelAtBegin(f)
	return bu
}

// SetFuelLevelAtEnd sets the "fuel_level_at_end" field.
func (bu *BookingUpdate) SetFuelLevelAtEnd(f float32) *BookingUpdate {
	bu.mutation.ResetFuelLevelAtEnd()
	bu.mutation.SetFuelLevelAtEnd(f)
	return bu
}

// AddFuelLevelAtEnd adds f to the "fuel_level_at_end" field.
func (bu *BookingUpdate) AddFuelLevelAtEnd(f float32) *BookingUpdate {
	bu.mutation.AddFuelLevelAtEnd(f)
	return bu
}

// SetMileageBegin sets the "mileage_begin" field.
func (bu *BookingUpdate) SetMileageBegin(i int) *BookingUpdate {
	bu.mutation.ResetMileageBegin()
	bu.mutation.SetMileageBegin(i)
	return bu
}

// AddMileageBegin adds i to the "mileage_begin" field.
func (bu *BookingUpdate) AddMileageBegin(i int) *BookingUpdate {
	bu.mutation.AddMileageBegin(i)
	return bu
}

// SetMileageEnd sets the "mileage_end" field.
func (bu *BookingUpdate) SetMileageEnd(i int) *BookingUpdate {
	bu.mutation.ResetMileageEnd()
	bu.mutation.SetMileageEnd(i)
	return bu
}

// AddMileageEnd adds i to the "mileage_end" field.
func (bu *BookingUpdate) AddMileageEnd(i int) *BookingUpdate {
	bu.mutation.AddMileageEnd(i)
	return bu
}

// SetBookingStatus sets the "booking_status" field.
func (bu *BookingUpdate) SetBookingStatus(s string) *BookingUpdate {
	bu.mutation.SetBookingStatus(s)
	return bu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bu *BookingUpdate) SetUserID(id int) *BookingUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BookingUpdate) SetUser(u *User) *BookingUpdate {
	return bu.SetUserID(u.ID)
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (bu *BookingUpdate) SetCarID(id int) *BookingUpdate {
	bu.mutation.SetCarID(id)
	return bu
}

// SetCar sets the "car" edge to the Car entity.
func (bu *BookingUpdate) SetCar(c *Car) *BookingUpdate {
	return bu.SetCarID(c.ID)
}

// SetBillingID sets the "billing" edge to the Billing entity by ID.
func (bu *BookingUpdate) SetBillingID(id int) *BookingUpdate {
	bu.mutation.SetBillingID(id)
	return bu
}

// SetNillableBillingID sets the "billing" edge to the Billing entity by ID if the given value is not nil.
func (bu *BookingUpdate) SetNillableBillingID(id *int) *BookingUpdate {
	if id != nil {
		bu = bu.SetBillingID(*id)
	}
	return bu
}

// SetBilling sets the "billing" edge to the Billing entity.
func (bu *BookingUpdate) SetBilling(b *Billing) *BookingUpdate {
	return bu.SetBillingID(b.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (bu *BookingUpdate) Mutation() *BookingMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BookingUpdate) ClearUser() *BookingUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearCar clears the "car" edge to the Car entity.
func (bu *BookingUpdate) ClearCar() *BookingUpdate {
	bu.mutation.ClearCar()
	return bu
}

// ClearBilling clears the "billing" edge to the Billing entity.
func (bu *BookingUpdate) ClearBilling() *BookingUpdate {
	bu.mutation.ClearBilling()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookingUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookingUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookingUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookingUpdate) check() error {
	if _, ok := bu.mutation.UserID(); bu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.user"`)
	}
	if _, ok := bu.mutation.CarID(); bu.mutation.CarCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.car"`)
	}
	return nil
}

func (bu *BookingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   booking.Table,
			Columns: booking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: booking.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.StartAt(); ok {
		_spec.SetField(booking.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.EndAt(); ok {
		_spec.SetField(booking.FieldEndAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.ReturnCarAt(); ok {
		_spec.SetField(booking.FieldReturnCarAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.FuelLevelAtBegin(); ok {
		_spec.SetField(booking.FieldFuelLevelAtBegin, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.AddedFuelLevelAtBegin(); ok {
		_spec.AddField(booking.FieldFuelLevelAtBegin, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.FuelLevelAtEnd(); ok {
		_spec.SetField(booking.FieldFuelLevelAtEnd, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.AddedFuelLevelAtEnd(); ok {
		_spec.AddField(booking.FieldFuelLevelAtEnd, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.MileageBegin(); ok {
		_spec.SetField(booking.FieldMileageBegin, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedMileageBegin(); ok {
		_spec.AddField(booking.FieldMileageBegin, field.TypeInt, value)
	}
	if value, ok := bu.mutation.MileageEnd(); ok {
		_spec.SetField(booking.FieldMileageEnd, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedMileageEnd(); ok {
		_spec.AddField(booking.FieldMileageEnd, field.TypeInt, value)
	}
	if value, ok := bu.mutation.BookingStatus(); ok {
		_spec.SetField(booking.FieldBookingStatus, field.TypeString, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.UserTable,
			Columns: []string{booking.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.UserTable,
			Columns: []string{booking.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.CarTable,
			Columns: []string{booking.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.CarTable,
			Columns: []string{booking.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BillingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   booking.BillingTable,
			Columns: []string{booking.BillingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billing.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BillingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   booking.BillingTable,
			Columns: []string{booking.BillingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billing.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{booking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BookingUpdateOne is the builder for updating a single Booking entity.
type BookingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookingMutation
}

// SetStartAt sets the "start_at" field.
func (buo *BookingUpdateOne) SetStartAt(t time.Time) *BookingUpdateOne {
	buo.mutation.SetStartAt(t)
	return buo
}

// SetEndAt sets the "end_at" field.
func (buo *BookingUpdateOne) SetEndAt(t time.Time) *BookingUpdateOne {
	buo.mutation.SetEndAt(t)
	return buo
}

// SetReturnCarAt sets the "return_car_at" field.
func (buo *BookingUpdateOne) SetReturnCarAt(t time.Time) *BookingUpdateOne {
	buo.mutation.SetReturnCarAt(t)
	return buo
}

// SetFuelLevelAtBegin sets the "fuel_level_at_begin" field.
func (buo *BookingUpdateOne) SetFuelLevelAtBegin(f float32) *BookingUpdateOne {
	buo.mutation.ResetFuelLevelAtBegin()
	buo.mutation.SetFuelLevelAtBegin(f)
	return buo
}

// AddFuelLevelAtBegin adds f to the "fuel_level_at_begin" field.
func (buo *BookingUpdateOne) AddFuelLevelAtBegin(f float32) *BookingUpdateOne {
	buo.mutation.AddFuelLevelAtBegin(f)
	return buo
}

// SetFuelLevelAtEnd sets the "fuel_level_at_end" field.
func (buo *BookingUpdateOne) SetFuelLevelAtEnd(f float32) *BookingUpdateOne {
	buo.mutation.ResetFuelLevelAtEnd()
	buo.mutation.SetFuelLevelAtEnd(f)
	return buo
}

// AddFuelLevelAtEnd adds f to the "fuel_level_at_end" field.
func (buo *BookingUpdateOne) AddFuelLevelAtEnd(f float32) *BookingUpdateOne {
	buo.mutation.AddFuelLevelAtEnd(f)
	return buo
}

// SetMileageBegin sets the "mileage_begin" field.
func (buo *BookingUpdateOne) SetMileageBegin(i int) *BookingUpdateOne {
	buo.mutation.ResetMileageBegin()
	buo.mutation.SetMileageBegin(i)
	return buo
}

// AddMileageBegin adds i to the "mileage_begin" field.
func (buo *BookingUpdateOne) AddMileageBegin(i int) *BookingUpdateOne {
	buo.mutation.AddMileageBegin(i)
	return buo
}

// SetMileageEnd sets the "mileage_end" field.
func (buo *BookingUpdateOne) SetMileageEnd(i int) *BookingUpdateOne {
	buo.mutation.ResetMileageEnd()
	buo.mutation.SetMileageEnd(i)
	return buo
}

// AddMileageEnd adds i to the "mileage_end" field.
func (buo *BookingUpdateOne) AddMileageEnd(i int) *BookingUpdateOne {
	buo.mutation.AddMileageEnd(i)
	return buo
}

// SetBookingStatus sets the "booking_status" field.
func (buo *BookingUpdateOne) SetBookingStatus(s string) *BookingUpdateOne {
	buo.mutation.SetBookingStatus(s)
	return buo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buo *BookingUpdateOne) SetUserID(id int) *BookingUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BookingUpdateOne) SetUser(u *User) *BookingUpdateOne {
	return buo.SetUserID(u.ID)
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (buo *BookingUpdateOne) SetCarID(id int) *BookingUpdateOne {
	buo.mutation.SetCarID(id)
	return buo
}

// SetCar sets the "car" edge to the Car entity.
func (buo *BookingUpdateOne) SetCar(c *Car) *BookingUpdateOne {
	return buo.SetCarID(c.ID)
}

// SetBillingID sets the "billing" edge to the Billing entity by ID.
func (buo *BookingUpdateOne) SetBillingID(id int) *BookingUpdateOne {
	buo.mutation.SetBillingID(id)
	return buo
}

// SetNillableBillingID sets the "billing" edge to the Billing entity by ID if the given value is not nil.
func (buo *BookingUpdateOne) SetNillableBillingID(id *int) *BookingUpdateOne {
	if id != nil {
		buo = buo.SetBillingID(*id)
	}
	return buo
}

// SetBilling sets the "billing" edge to the Billing entity.
func (buo *BookingUpdateOne) SetBilling(b *Billing) *BookingUpdateOne {
	return buo.SetBillingID(b.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (buo *BookingUpdateOne) Mutation() *BookingMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BookingUpdateOne) ClearUser() *BookingUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearCar clears the "car" edge to the Car entity.
func (buo *BookingUpdateOne) ClearCar() *BookingUpdateOne {
	buo.mutation.ClearCar()
	return buo
}

// ClearBilling clears the "billing" edge to the Billing entity.
func (buo *BookingUpdateOne) ClearBilling() *BookingUpdateOne {
	buo.mutation.ClearBilling()
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookingUpdateOne) Select(field string, fields ...string) *BookingUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Booking entity.
func (buo *BookingUpdateOne) Save(ctx context.Context) (*Booking, error) {
	var (
		err  error
		node *Booking
	)
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Booking)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BookingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookingUpdateOne) SaveX(ctx context.Context) *Booking {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookingUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookingUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookingUpdateOne) check() error {
	if _, ok := buo.mutation.UserID(); buo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.user"`)
	}
	if _, ok := buo.mutation.CarID(); buo.mutation.CarCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Booking.car"`)
	}
	return nil
}

func (buo *BookingUpdateOne) sqlSave(ctx context.Context) (_node *Booking, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   booking.Table,
			Columns: booking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: booking.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Booking.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, booking.FieldID)
		for _, f := range fields {
			if !booking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != booking.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.StartAt(); ok {
		_spec.SetField(booking.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.EndAt(); ok {
		_spec.SetField(booking.FieldEndAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.ReturnCarAt(); ok {
		_spec.SetField(booking.FieldReturnCarAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.FuelLevelAtBegin(); ok {
		_spec.SetField(booking.FieldFuelLevelAtBegin, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.AddedFuelLevelAtBegin(); ok {
		_spec.AddField(booking.FieldFuelLevelAtBegin, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.FuelLevelAtEnd(); ok {
		_spec.SetField(booking.FieldFuelLevelAtEnd, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.AddedFuelLevelAtEnd(); ok {
		_spec.AddField(booking.FieldFuelLevelAtEnd, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.MileageBegin(); ok {
		_spec.SetField(booking.FieldMileageBegin, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedMileageBegin(); ok {
		_spec.AddField(booking.FieldMileageBegin, field.TypeInt, value)
	}
	if value, ok := buo.mutation.MileageEnd(); ok {
		_spec.SetField(booking.FieldMileageEnd, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedMileageEnd(); ok {
		_spec.AddField(booking.FieldMileageEnd, field.TypeInt, value)
	}
	if value, ok := buo.mutation.BookingStatus(); ok {
		_spec.SetField(booking.FieldBookingStatus, field.TypeString, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.UserTable,
			Columns: []string{booking.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.UserTable,
			Columns: []string{booking.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.CarTable,
			Columns: []string{booking.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   booking.CarTable,
			Columns: []string{booking.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: car.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BillingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   booking.BillingTable,
			Columns: []string{booking.BillingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billing.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BillingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   booking.BillingTable,
			Columns: []string{booking.BillingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: billing.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Booking{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{booking.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
