// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "password", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "is_admin", Type: field.TypeBool, Default: false},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
	}
	// BillingsColumns holds the columns for the "billings" table.
	BillingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeString, Default: "unpaid"},
		{Name: "basic_cost", Type: field.TypeFloat32, Default: 0},
		{Name: "fuel_cost", Type: field.TypeFloat32, Default: 0},
		{Name: "compensation", Type: field.TypeFloat32, Default: 0},
		{Name: "deposit", Type: field.TypeFloat32, Default: 0},
		{Name: "billing_card", Type: field.TypeInt, Nullable: true},
		{Name: "billing_user", Type: field.TypeInt, Nullable: true},
	}
	// BillingsTable holds the schema information for the "billings" table.
	BillingsTable = &schema.Table{
		Name:       "billings",
		Columns:    BillingsColumns,
		PrimaryKey: []*schema.Column{BillingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "billings_cards_card",
				Columns:    []*schema.Column{BillingsColumns[6]},
				RefColumns: []*schema.Column{CardsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "billings_users_user",
				Columns:    []*schema.Column{BillingsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BookingsColumns holds the columns for the "bookings" table.
	BookingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "start_at", Type: field.TypeInt64},
		{Name: "end_at", Type: field.TypeInt64},
		{Name: "return_car_at", Type: field.TypeInt64, Nullable: true},
		{Name: "rate", Type: field.TypeFloat32, Default: 5},
		{Name: "exceed_rate", Type: field.TypeFloat32, Default: 10},
		{Name: "deposit", Type: field.TypeFloat32, Default: 0},
		{Name: "fuel_level_at_begin", Type: field.TypeFloat32, Nullable: true},
		{Name: "fuel_level_at_end", Type: field.TypeFloat32, Nullable: true},
		{Name: "mileage_begin", Type: field.TypeInt, Nullable: true},
		{Name: "mileage_end", Type: field.TypeInt, Nullable: true},
		{Name: "booking_status", Type: field.TypeString, Default: "plan"},
		{Name: "billing_booking", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "booking_user", Type: field.TypeInt},
		{Name: "booking_car", Type: field.TypeInt},
	}
	// BookingsTable holds the schema information for the "bookings" table.
	BookingsTable = &schema.Table{
		Name:       "bookings",
		Columns:    BookingsColumns,
		PrimaryKey: []*schema.Column{BookingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bookings_billings_booking",
				Columns:    []*schema.Column{BookingsColumns[12]},
				RefColumns: []*schema.Column{BillingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "bookings_users_user",
				Columns:    []*schema.Column{BookingsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "bookings_cars_car",
				Columns:    []*schema.Column{BookingsColumns[14]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CarsColumns holds the columns for the "cars" table.
	CarsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "color", Type: field.TypeString},
		{Name: "brand", Type: field.TypeString},
		{Name: "model", Type: field.TypeString},
		{Name: "year", Type: field.TypeInt},
		{Name: "status", Type: field.TypeString, Default: "idle"},
		{Name: "car_type", Type: field.TypeString},
		{Name: "plate_number", Type: field.TypeString},
		{Name: "plate_country", Type: field.TypeString},
		{Name: "unit_price", Type: field.TypeFloat32},
		{Name: "price", Type: field.TypeFloat32},
		{Name: "mileage", Type: field.TypeInt},
		{Name: "deposit", Type: field.TypeFloat32},
		{Name: "car_location", Type: field.TypeInt, Nullable: true},
		{Name: "location_cars", Type: field.TypeInt, Nullable: true},
	}
	// CarsTable holds the schema information for the "cars" table.
	CarsTable = &schema.Table{
		Name:       "cars",
		Columns:    CarsColumns,
		PrimaryKey: []*schema.Column{CarsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cars_locations_location",
				Columns:    []*schema.Column{CarsColumns[13]},
				RefColumns: []*schema.Column{LocationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "cars_locations_cars",
				Columns:    []*schema.Column{CarsColumns[14]},
				RefColumns: []*schema.Column{LocationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CardsColumns holds the columns for the "cards" table.
	CardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "number", Type: field.TypeString},
		{Name: "cardholder_name", Type: field.TypeString},
		{Name: "valid_until", Type: field.TypeString},
		{Name: "user_card", Type: field.TypeInt, Nullable: true},
	}
	// CardsTable holds the schema information for the "cards" table.
	CardsTable = &schema.Table{
		Name:       "cards",
		Columns:    CardsColumns,
		PrimaryKey: []*schema.Column{CardsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cards_users_card",
				Columns:    []*schema.Column{CardsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LocationsColumns holds the columns for the "locations" table.
	LocationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "latitude", Type: field.TypeFloat32},
		{Name: "longitude", Type: field.TypeFloat32},
	}
	// LocationsTable holds the schema information for the "locations" table.
	LocationsTable = &schema.Table{
		Name:       "locations",
		Columns:    LocationsColumns,
		PrimaryKey: []*schema.Column{LocationsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "first_name", Type: field.TypeString, Default: ""},
		{Name: "last_name", Type: field.TypeString, Default: ""},
		{Name: "address", Type: field.TypeString, Default: ""},
		{Name: "postal_code", Type: field.TypeString, Default: ""},
		{Name: "tel", Type: field.TypeString, Default: ""},
		{Name: "driver_license_id", Type: field.TypeString, Default: ""},
		{Name: "driver_license_country", Type: field.TypeString, Default: ""},
		{Name: "birthday", Type: field.TypeInt64},
		{Name: "account_user", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_accounts_user",
				Columns:    []*schema.Column{UsersColumns[9]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		BillingsTable,
		BookingsTable,
		CarsTable,
		CardsTable,
		LocationsTable,
		UsersTable,
	}
)

func init() {
	BillingsTable.ForeignKeys[0].RefTable = CardsTable
	BillingsTable.ForeignKeys[1].RefTable = UsersTable
	BookingsTable.ForeignKeys[0].RefTable = BillingsTable
	BookingsTable.ForeignKeys[1].RefTable = UsersTable
	BookingsTable.ForeignKeys[2].RefTable = CarsTable
	CarsTable.ForeignKeys[0].RefTable = LocationsTable
	CarsTable.ForeignKeys[1].RefTable = LocationsTable
	CardsTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = AccountsTable
}
