// Code generated by ent, DO NOT EDIT.

package ent

import (
	"carlord/ent/billing"
	"carlord/ent/booking"
	"carlord/ent/card"
	"carlord/ent/predicate"
	"carlord/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BillingUpdate is the builder for updating Billing entities.
type BillingUpdate struct {
	config
	hooks    []Hook
	mutation *BillingMutation
}

// Where appends a list predicates to the BillingUpdate builder.
func (bu *BillingUpdate) Where(ps ...predicate.Billing) *BillingUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetStatus sets the "status" field.
func (bu *BillingUpdate) SetStatus(s string) *BillingUpdate {
	bu.mutation.SetStatus(s)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BillingUpdate) SetNillableStatus(s *string) *BillingUpdate {
	if s != nil {
		bu.SetStatus(*s)
	}
	return bu
}

// SetBasicCost sets the "basic_cost" field.
func (bu *BillingUpdate) SetBasicCost(f float32) *BillingUpdate {
	bu.mutation.ResetBasicCost()
	bu.mutation.SetBasicCost(f)
	return bu
}

// SetNillableBasicCost sets the "basic_cost" field if the given value is not nil.
func (bu *BillingUpdate) SetNillableBasicCost(f *float32) *BillingUpdate {
	if f != nil {
		bu.SetBasicCost(*f)
	}
	return bu
}

// AddBasicCost adds f to the "basic_cost" field.
func (bu *BillingUpdate) AddBasicCost(f float32) *BillingUpdate {
	bu.mutation.AddBasicCost(f)
	return bu
}

// SetFuelCost sets the "fuel_cost" field.
func (bu *BillingUpdate) SetFuelCost(f float32) *BillingUpdate {
	bu.mutation.ResetFuelCost()
	bu.mutation.SetFuelCost(f)
	return bu
}

// SetNillableFuelCost sets the "fuel_cost" field if the given value is not nil.
func (bu *BillingUpdate) SetNillableFuelCost(f *float32) *BillingUpdate {
	if f != nil {
		bu.SetFuelCost(*f)
	}
	return bu
}

// AddFuelCost adds f to the "fuel_cost" field.
func (bu *BillingUpdate) AddFuelCost(f float32) *BillingUpdate {
	bu.mutation.AddFuelCost(f)
	return bu
}

// SetCompensation sets the "compensation" field.
func (bu *BillingUpdate) SetCompensation(f float32) *BillingUpdate {
	bu.mutation.ResetCompensation()
	bu.mutation.SetCompensation(f)
	return bu
}

// SetNillableCompensation sets the "compensation" field if the given value is not nil.
func (bu *BillingUpdate) SetNillableCompensation(f *float32) *BillingUpdate {
	if f != nil {
		bu.SetCompensation(*f)
	}
	return bu
}

// AddCompensation adds f to the "compensation" field.
func (bu *BillingUpdate) AddCompensation(f float32) *BillingUpdate {
	bu.mutation.AddCompensation(f)
	return bu
}

// SetDeposit sets the "deposit" field.
func (bu *BillingUpdate) SetDeposit(f float32) *BillingUpdate {
	bu.mutation.ResetDeposit()
	bu.mutation.SetDeposit(f)
	return bu
}

// SetNillableDeposit sets the "deposit" field if the given value is not nil.
func (bu *BillingUpdate) SetNillableDeposit(f *float32) *BillingUpdate {
	if f != nil {
		bu.SetDeposit(*f)
	}
	return bu
}

// AddDeposit adds f to the "deposit" field.
func (bu *BillingUpdate) AddDeposit(f float32) *BillingUpdate {
	bu.mutation.AddDeposit(f)
	return bu
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (bu *BillingUpdate) SetBookingID(id int) *BillingUpdate {
	bu.mutation.SetBookingID(id)
	return bu
}

// SetNillableBookingID sets the "booking" edge to the Booking entity by ID if the given value is not nil.
func (bu *BillingUpdate) SetNillableBookingID(id *int) *BillingUpdate {
	if id != nil {
		bu = bu.SetBookingID(*id)
	}
	return bu
}

// SetBooking sets the "booking" edge to the Booking entity.
func (bu *BillingUpdate) SetBooking(b *Booking) *BillingUpdate {
	return bu.SetBookingID(b.ID)
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (bu *BillingUpdate) SetCardID(id int) *BillingUpdate {
	bu.mutation.SetCardID(id)
	return bu
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (bu *BillingUpdate) SetNillableCardID(id *int) *BillingUpdate {
	if id != nil {
		bu = bu.SetCardID(*id)
	}
	return bu
}

// SetCard sets the "card" edge to the Card entity.
func (bu *BillingUpdate) SetCard(c *Card) *BillingUpdate {
	return bu.SetCardID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bu *BillingUpdate) SetUserID(id int) *BillingUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bu *BillingUpdate) SetNillableUserID(id *int) *BillingUpdate {
	if id != nil {
		bu = bu.SetUserID(*id)
	}
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BillingUpdate) SetUser(u *User) *BillingUpdate {
	return bu.SetUserID(u.ID)
}

// Mutation returns the BillingMutation object of the builder.
func (bu *BillingUpdate) Mutation() *BillingMutation {
	return bu.mutation
}

// ClearBooking clears the "booking" edge to the Booking entity.
func (bu *BillingUpdate) ClearBooking() *BillingUpdate {
	bu.mutation.ClearBooking()
	return bu
}

// ClearCard clears the "card" edge to the Card entity.
func (bu *BillingUpdate) ClearCard() *BillingUpdate {
	bu.mutation.ClearCard()
	return bu
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BillingUpdate) ClearUser() *BillingUpdate {
	bu.mutation.ClearUser()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BillingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillingUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillingUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillingUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BillingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   billing.Table,
			Columns: billing.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: billing.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(billing.FieldStatus, field.TypeString, value)
	}
	if value, ok := bu.mutation.BasicCost(); ok {
		_spec.SetField(billing.FieldBasicCost, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.AddedBasicCost(); ok {
		_spec.AddField(billing.FieldBasicCost, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.FuelCost(); ok {
		_spec.SetField(billing.FieldFuelCost, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.AddedFuelCost(); ok {
		_spec.AddField(billing.FieldFuelCost, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.Compensation(); ok {
		_spec.SetField(billing.FieldCompensation, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.AddedCompensation(); ok {
		_spec.AddField(billing.FieldCompensation, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.Deposit(); ok {
		_spec.SetField(billing.FieldDeposit, field.TypeFloat32, value)
	}
	if value, ok := bu.mutation.AddedDeposit(); ok {
		_spec.AddField(billing.FieldDeposit, field.TypeFloat32, value)
	}
	if bu.mutation.BookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   billing.BookingTable,
			Columns: []string{billing.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   billing.BookingTable,
			Columns: []string{billing.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.CardTable,
			Columns: []string{billing.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.CardTable,
			Columns: []string{billing.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.UserTable,
			Columns: []string{billing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.UserTable,
			Columns: []string{billing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BillingUpdateOne is the builder for updating a single Billing entity.
type BillingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingMutation
}

// SetStatus sets the "status" field.
func (buo *BillingUpdateOne) SetStatus(s string) *BillingUpdateOne {
	buo.mutation.SetStatus(s)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableStatus(s *string) *BillingUpdateOne {
	if s != nil {
		buo.SetStatus(*s)
	}
	return buo
}

// SetBasicCost sets the "basic_cost" field.
func (buo *BillingUpdateOne) SetBasicCost(f float32) *BillingUpdateOne {
	buo.mutation.ResetBasicCost()
	buo.mutation.SetBasicCost(f)
	return buo
}

// SetNillableBasicCost sets the "basic_cost" field if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableBasicCost(f *float32) *BillingUpdateOne {
	if f != nil {
		buo.SetBasicCost(*f)
	}
	return buo
}

// AddBasicCost adds f to the "basic_cost" field.
func (buo *BillingUpdateOne) AddBasicCost(f float32) *BillingUpdateOne {
	buo.mutation.AddBasicCost(f)
	return buo
}

// SetFuelCost sets the "fuel_cost" field.
func (buo *BillingUpdateOne) SetFuelCost(f float32) *BillingUpdateOne {
	buo.mutation.ResetFuelCost()
	buo.mutation.SetFuelCost(f)
	return buo
}

// SetNillableFuelCost sets the "fuel_cost" field if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableFuelCost(f *float32) *BillingUpdateOne {
	if f != nil {
		buo.SetFuelCost(*f)
	}
	return buo
}

// AddFuelCost adds f to the "fuel_cost" field.
func (buo *BillingUpdateOne) AddFuelCost(f float32) *BillingUpdateOne {
	buo.mutation.AddFuelCost(f)
	return buo
}

// SetCompensation sets the "compensation" field.
func (buo *BillingUpdateOne) SetCompensation(f float32) *BillingUpdateOne {
	buo.mutation.ResetCompensation()
	buo.mutation.SetCompensation(f)
	return buo
}

// SetNillableCompensation sets the "compensation" field if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableCompensation(f *float32) *BillingUpdateOne {
	if f != nil {
		buo.SetCompensation(*f)
	}
	return buo
}

// AddCompensation adds f to the "compensation" field.
func (buo *BillingUpdateOne) AddCompensation(f float32) *BillingUpdateOne {
	buo.mutation.AddCompensation(f)
	return buo
}

// SetDeposit sets the "deposit" field.
func (buo *BillingUpdateOne) SetDeposit(f float32) *BillingUpdateOne {
	buo.mutation.ResetDeposit()
	buo.mutation.SetDeposit(f)
	return buo
}

// SetNillableDeposit sets the "deposit" field if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableDeposit(f *float32) *BillingUpdateOne {
	if f != nil {
		buo.SetDeposit(*f)
	}
	return buo
}

// AddDeposit adds f to the "deposit" field.
func (buo *BillingUpdateOne) AddDeposit(f float32) *BillingUpdateOne {
	buo.mutation.AddDeposit(f)
	return buo
}

// SetBookingID sets the "booking" edge to the Booking entity by ID.
func (buo *BillingUpdateOne) SetBookingID(id int) *BillingUpdateOne {
	buo.mutation.SetBookingID(id)
	return buo
}

// SetNillableBookingID sets the "booking" edge to the Booking entity by ID if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableBookingID(id *int) *BillingUpdateOne {
	if id != nil {
		buo = buo.SetBookingID(*id)
	}
	return buo
}

// SetBooking sets the "booking" edge to the Booking entity.
func (buo *BillingUpdateOne) SetBooking(b *Booking) *BillingUpdateOne {
	return buo.SetBookingID(b.ID)
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (buo *BillingUpdateOne) SetCardID(id int) *BillingUpdateOne {
	buo.mutation.SetCardID(id)
	return buo
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableCardID(id *int) *BillingUpdateOne {
	if id != nil {
		buo = buo.SetCardID(*id)
	}
	return buo
}

// SetCard sets the "card" edge to the Card entity.
func (buo *BillingUpdateOne) SetCard(c *Card) *BillingUpdateOne {
	return buo.SetCardID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buo *BillingUpdateOne) SetUserID(id int) *BillingUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (buo *BillingUpdateOne) SetNillableUserID(id *int) *BillingUpdateOne {
	if id != nil {
		buo = buo.SetUserID(*id)
	}
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BillingUpdateOne) SetUser(u *User) *BillingUpdateOne {
	return buo.SetUserID(u.ID)
}

// Mutation returns the BillingMutation object of the builder.
func (buo *BillingUpdateOne) Mutation() *BillingMutation {
	return buo.mutation
}

// ClearBooking clears the "booking" edge to the Booking entity.
func (buo *BillingUpdateOne) ClearBooking() *BillingUpdateOne {
	buo.mutation.ClearBooking()
	return buo
}

// ClearCard clears the "card" edge to the Card entity.
func (buo *BillingUpdateOne) ClearCard() *BillingUpdateOne {
	buo.mutation.ClearCard()
	return buo
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BillingUpdateOne) ClearUser() *BillingUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BillingUpdateOne) Select(field string, fields ...string) *BillingUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Billing entity.
func (buo *BillingUpdateOne) Save(ctx context.Context) (*Billing, error) {
	var (
		err  error
		node *Billing
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Billing)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BillingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillingUpdateOne) SaveX(ctx context.Context) *Billing {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BillingUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillingUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BillingUpdateOne) sqlSave(ctx context.Context) (_node *Billing, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   billing.Table,
			Columns: billing.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: billing.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Billing.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billing.FieldID)
		for _, f := range fields {
			if !billing.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billing.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(billing.FieldStatus, field.TypeString, value)
	}
	if value, ok := buo.mutation.BasicCost(); ok {
		_spec.SetField(billing.FieldBasicCost, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.AddedBasicCost(); ok {
		_spec.AddField(billing.FieldBasicCost, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.FuelCost(); ok {
		_spec.SetField(billing.FieldFuelCost, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.AddedFuelCost(); ok {
		_spec.AddField(billing.FieldFuelCost, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.Compensation(); ok {
		_spec.SetField(billing.FieldCompensation, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.AddedCompensation(); ok {
		_spec.AddField(billing.FieldCompensation, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.Deposit(); ok {
		_spec.SetField(billing.FieldDeposit, field.TypeFloat32, value)
	}
	if value, ok := buo.mutation.AddedDeposit(); ok {
		_spec.AddField(billing.FieldDeposit, field.TypeFloat32, value)
	}
	if buo.mutation.BookingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   billing.BookingTable,
			Columns: []string{billing.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BookingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   billing.BookingTable,
			Columns: []string{billing.BookingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.CardTable,
			Columns: []string{billing.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.CardTable,
			Columns: []string{billing.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.UserTable,
			Columns: []string{billing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   billing.UserTable,
			Columns: []string{billing.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Billing{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billing.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
