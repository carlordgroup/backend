// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldIsAdmin holds the string denoting the is_admin field in the database.
	FieldIsAdmin = "is_admin"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldPostalCode holds the string denoting the postal_code field in the database.
	FieldPostalCode = "postal_code"
	// FieldTel holds the string denoting the tel field in the database.
	FieldTel = "tel"
	// FieldDriverLicenseID holds the string denoting the driver_license_id field in the database.
	FieldDriverLicenseID = "driver_license_id"
	// FieldDriverLicenseCountry holds the string denoting the driver_license_country field in the database.
	FieldDriverLicenseCountry = "driver_license_country"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// EdgeCard holds the string denoting the card edge name in mutations.
	EdgeCard = "card"
	// EdgeNoteFlows holds the string denoting the note_flows edge name in mutations.
	EdgeNoteFlows = "note_flows"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CardTable is the table that holds the card relation/edge.
	CardTable = "cards"
	// CardInverseTable is the table name for the Card entity.
	// It exists in this package in order to avoid circular dependency with the "card" package.
	CardInverseTable = "cards"
	// CardColumn is the table column denoting the card relation/edge.
	CardColumn = "user_card"
	// NoteFlowsTable is the table that holds the note_flows relation/edge.
	NoteFlowsTable = "flaws"
	// NoteFlowsInverseTable is the table name for the Flaw entity.
	// It exists in this package in order to avoid circular dependency with the "flaw" package.
	NoteFlowsInverseTable = "flaws"
	// NoteFlowsColumn is the table column denoting the note_flows relation/edge.
	NoteFlowsColumn = "user_note_flows"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldPassword,
	FieldEmail,
	FieldIsAdmin,
	FieldFirstName,
	FieldLastName,
	FieldAddress,
	FieldPostalCode,
	FieldTel,
	FieldDriverLicenseID,
	FieldDriverLicenseCountry,
	FieldBirthday,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsAdmin holds the default value on creation for the "is_admin" field.
	DefaultIsAdmin bool
)
